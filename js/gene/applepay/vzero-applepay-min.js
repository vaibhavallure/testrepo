var vZeroApplePay=Class.create();vZeroApplePay.prototype={initialize:function(t,e,n,i,o){return!window.ApplePaySession||window.ApplePaySession&&!ApplePaySession.canMakePayments()?(console.warn("This browser does not support Apple Pay, the method will be hidden."),!1):(this.clientToken=t||!1,this.storeFrontName=e,this.integration=n||!1,this.appleButtonSelector=i,this.clientTokenUrl=o,this.vzero=this.integration.vzero||!1,this.methodCode="gene_braintree_applepay",this.client=!1,this.amount=!1,this.button=!1,this.integration&&this.bindEvents(),void($$("body").first()&&$$("body").first().addClassName("supports-apple-pay")))},bindEvents:function(){this.vzero.observeEvent("integration.onInitDefaultMethod",this.onInitDefaultMethod,this),this.vzero.observeEvent("onAfterUpdateData",this.onAfterUpdateData,this),this.integration.isOnepage?(this.vzero.observeEvent("integration.onPaymentMethodSwitch",this.onPaymentMethodSwitch,this),this.vzero.observeEvent("integration.onObserveAjaxRequests",this.onObserveAjaxRequests,this)):this.vzero.observeEvent("integration.onReviewInit",this.onReviewInit,this)},getClientToken:function(t){return this.clientToken!==!1?t(this.clientToken):window.braintreeClientToken?t(window.braintreeClientToken):void new Ajax.Request(this.clientTokenUrl,{method:"get",onSuccess:function(e){if(e&&(e.responseJSON||e.responseText)){var n=this._parseTransportAsJson(e);if(1==n.success&&"string"==typeof n.client_token)return this.clientToken=n.client_token,window.braintreeClientToken=n.client_token,t(this.clientToken);console.error("We were unable to retrieve a client token from the server to initialize the Braintree flow."),n.error&&console.error(n.error)}}.bind(this),onFailure:function(){console.error("We were unable to retrieve a client token from the server to initialize the Braintree flow.")}.bind(this)})},getClient:function(t){this.client!==!1?"function"==typeof t&&t(this.client):this.getClientToken(function(e){braintree.client.create({authorization:e},function(e,n){return e?void console.error(e):(this.client=n,void t(this.client))}.bind(this))})},isApplePayActive:function(){return!this.integration||this.integration.getPaymentMethod()==this.methodCode},onAfterUpdateData:function(t,e){return"undefined"!=typeof t.grandTotal&&t.grandTotal&&(e.amount=t.grandTotal),e._updateButton()},onInitDefaultMethod:function(t,e){return e._updateButton()},onPaymentMethodSwitch:function(t,e){return e._updateButton()},onObserveAjaxRequests:function(t,e){return e._updateButton()},onReviewInit:function(t,e){return e._updateButton()},_updateButton:function(){this.isApplePayActive()?this.addButton(!1,!1,!0):this.hideButton()},addButton:function(t,e,n){var i;if(t=t||$$(this.appleButtonSelector).first().innerHTML,e=e||this.integration.submitButtonClass,n=n||!1,this.isApplePayActive())if(t)if(e){i="string"==typeof e?$$(e).first():e;var o=i.up();if(!i)return console.warn("Unable to locate container "+containerQuery+" for Apple Pay button."),!1;if(this.button)this.button.show(),n&&i.hide();else{if(n?(o.insert(t),i.hide()):o.update(t),!o.select("[data-applepay]").length)return console.warn("Unable to find valid <button /> element within container."),!1;var r=o.select("[data-applepay]").first();this.button=r,r.addClassName("braintree-applepay-loading"),r.setAttribute("disabled","disabled");var a={validate:this.integration.validateAll};this.attachApplePayEvent(r,a)}}else console.error("Unable to locate element with selector "+this.appleButtonSelector+" for button insertion");else console.error("Unable to locate Apple Pay button with selector "+this.appleButtonSelector)},attachApplePayEvent:function(t,e){e=e||{},Array.isArray(t)||(t=[t]),t.each(function(t){t.show()}),this.getClient(function(n){braintree.applePay.create({client:n},function(n,i){if(n)return void console.error("Error creating applePayInstance:",n);var o;t.each(function(t){t.removeClassName("braintree-applepay-loading"),t.removeAttribute("disabled"),Event.stopObserving(t,"click"),Event.observe(t,"click",function(t){if(Event.stop(t),"function"==typeof e.validate){try{var n=e.validate()}catch(r){if("object"==typeof productAddToCartForm&&null!==productAddToCartForm.form){var n=!1;throw r}var n=!0}n&&(o=this.createApplePaySession(i,e),o.begin())}else o=this.createApplePaySession(i,e),o.begin()}.bind(this))}.bind(this))}.bind(this))}.bind(this))},buildPaymentRequest:function(t,e){var n={total:{label:this.storeFrontName,amount:this.amount||this.vzero.amount}};return"object"==typeof e.paymentRequest&&(n=Object.extend(n,e.paymentRequest)),t.createPaymentRequest(n)},createApplePaySession:function(t,e){var n=new ApplePaySession(1,this.buildPaymentRequest(t,e));return n.onvalidatemerchant=function(e){this.onValidateMerchant(e,t,n)}.bind(this),n.onpaymentauthorized=function(i){this.onPaymentAuthorized(i,t,n,e)}.bind(this),n.onshippingcontactselected=function(i){"function"==typeof e.onShippingContactSelect&&e.onShippingContactSelect(i,t,n)}.bind(this),n.onshippingmethodselected=function(i){"function"==typeof e.onShippingMethodSelect&&e.onShippingMethodSelect(i,t,n)}.bind(this),n},onValidateMerchant:function(t,e,n){e.performValidation({validationURL:t.validationURL,displayName:this.storeFrontName},function(t,e){return t?(console.error("Error validating merchant:",t),void n.abort()):void n.completeMerchantValidation(e)})},onPaymentAuthorized:function(t,e,n,i){e.tokenize({token:t.payment.token},function(e,o){return e?(console.error("Error tokenizing Apple Pay:",e),void n.completePayment(ApplePaySession.STATUS_FAILURE)):(n.completePayment(ApplePaySession.STATUS_SUCCESS),void(this.integration?(this.updatePaymentNonce(o.nonce),this.integration.resetLoading(),this.integration.submitCheckout()):"function"==typeof i.onSuccess&&i.onSuccess(o,t)))}.bind(this))},updatePaymentNonce:function(t){$("applepay-payment-nonce").value=t},hideButton:function(){this.button&&this.button.hide()},_parseTransportAsJson:function(transport){return transport.responseJSON&&"object"==typeof transport.responseJSON?transport.responseJSON:transport.responseText?"object"==typeof JSON&&"function"==typeof JSON.parse?JSON.parse(transport.responseText):eval("("+transport.responseText+")"):{}}};
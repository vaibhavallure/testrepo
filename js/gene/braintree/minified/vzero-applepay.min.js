var vZeroApplePay=Class.create();vZeroApplePay.prototype={initialize:function(t,e,n,i,o){if(!window.ApplePaySession||window.ApplePaySession&&!ApplePaySession.canMakePayments())return console.warn("This browser does not support Apple Pay, the method will be hidden."),!1;this.clientToken=t||!1,this.storeFrontName=e,this.integration=n||!1,this.appleButtonSelector=i,this.clientTokenUrl=o,this.vzero=this.integration.vzero||!1,this.methodCode="gene_braintree_applepay",this.client=!1,this.amount=!1,this.button=!1,this.integration&&this.bindEvents(),$$("body").first()&&$$("body").first().addClassName("supports-apple-pay")},bindEvents:function(){this.vzero.observeEvent("integration.onInitDefaultMethod",this.onInitDefaultMethod,this),this.vzero.observeEvent("onAfterUpdateData",this.onAfterUpdateData,this),this.integration.isOnepage?(this.vzero.observeEvent("integration.onPaymentMethodSwitch",this.onPaymentMethodSwitch,this),this.vzero.observeEvent("integration.onObserveAjaxRequests",this.onObserveAjaxRequests,this)):this.vzero.observeEvent("integration.onReviewInit",this.onReviewInit,this)},getClientToken:function(n){return!1!==this.clientToken?n(this.clientToken):window.braintreeClientToken?n(window.braintreeClientToken):void new Ajax.Request(this.clientTokenUrl,{method:"get",onSuccess:function(t){if(t&&(t.responseJSON||t.responseText)){var e=this._parseTransportAsJson(t);if(1==e.success&&"string"==typeof e.client_token)return this.clientToken=e.client_token,window.braintreeClientToken=e.client_token,n(this.clientToken);console.error("We were unable to retrieve a client token from the server to initialize the Braintree flow."),e.error&&console.error(e.error)}}.bind(this),onFailure:function(){console.error("We were unable to retrieve a client token from the server to initialize the Braintree flow.")}.bind(this)})},getClient:function(n){!1!==this.client?"function"==typeof n&&n(this.client):this.getClientToken(function(t){braintree.client.create({authorization:t},function(t,e){t?console.error(t):(this.client=e,n(this.client))}.bind(this))})},isApplePayActive:function(){return!this.integration||this.integration.getPaymentMethod()==this.methodCode},onAfterUpdateData:function(t,e){return void 0!==t.grandTotal&&t.grandTotal&&(e.amount=t.grandTotal),e._updateButton()},onInitDefaultMethod:function(t,e){return e._updateButton()},onPaymentMethodSwitch:function(t,e){return e._updateButton()},onObserveAjaxRequests:function(t,e){return e._updateButton()},onReviewInit:function(t,e){return e._updateButton()},_updateButton:function(){this.isApplePayActive()?this.addButton(!1,!1,!0):this.hideButton()},addButton:function(t,e,n){var i;if(t=t||$$(this.appleButtonSelector).first().innerHTML,e=e||this.integration.submitButtonClass,n=n||!1,this.isApplePayActive())if(t)if(e){var o=(i="string"==typeof e?$$(e).first():e).up();if(!i)return console.warn("Unable to locate container "+containerQuery+" for Apple Pay button."),!1;if(this.button)this.button.show(),n&&i.hide();else{if(n?(o.insert(t),i.hide()):o.update(t),!o.select("[data-applepay]").length)return console.warn("Unable to find valid <button /> element within container."),!1;var r=o.select("[data-applepay]").first();(this.button=r).addClassName("braintree-applepay-loading"),r.setAttribute("disabled","disabled");var a={validate:this.integration.validateAll};this.attachApplePayEvent(r,a)}}else console.error("Unable to locate element with selector "+this.appleButtonSelector+" for button insertion");else console.error("Unable to locate Apple Pay button with selector "+this.appleButtonSelector)},attachApplePayEvent:function(i,o){this.getClient(function(t){braintree.applePay.create({client:t},function(t,e){if(t)console.error("Error creating applePayInstance:",t);else{var n=this;window.ApplePaySession.canMakePaymentsWithActiveCard(e.merchantIdentifier).then(function(t){t&&n.bindButtons(i,o,e)})}}.bind(this))}.bind(this))},bindButtons:function(t,n,i){n=n||{},Array.isArray(t)||(t=[t]),t.each(function(t){t.removeClassName("braintree-applepay-loading"),t.removeAttribute("disabled"),t.show(),Event.stopObserving(t,"click"),Event.observe(t,"click",function(t){if(Event.stop(t),"function"==typeof n.validate){try{var e=n.validate()}catch(t){if("object"==typeof productAddToCartForm&&null!==productAddToCartForm.form){e=!1;throw t}var e=!0}e&&this.createApplePaySession(i,n).begin()}else this.createApplePaySession(i,n).begin()}.bind(this))}.bind(this))},buildPaymentRequest:function(t,e){var n={total:{label:this.storeFrontName,amount:this.amount||this.vzero.amount}};return"object"==typeof e.paymentRequest&&(n=Object.extend(n,e.paymentRequest)),t.createPaymentRequest(n)},createApplePaySession:function(e,n){var i=new ApplePaySession(1,this.buildPaymentRequest(e,n));return i.onvalidatemerchant=function(t){this.onValidateMerchant(t,e,i)}.bind(this),i.onpaymentauthorized=function(t){this.onPaymentAuthorized(t,e,i,n)}.bind(this),i.onshippingcontactselected=function(t){"function"==typeof n.onShippingContactSelect&&n.onShippingContactSelect(t,e,i)}.bind(this),i.onshippingmethodselected=function(t){"function"==typeof n.onShippingMethodSelect&&n.onShippingMethodSelect(t,e,i)}.bind(this),i},onValidateMerchant:function(t,e,n){e.performValidation({validationURL:t.validationURL,displayName:this.storeFrontName},function(t,e){if(t)return console.error("Error validating merchant:",t),void n.abort();n.completeMerchantValidation(e)})},onPaymentAuthorized:function(n,t,i,o){t.tokenize({token:n.payment.token},function(t,e){if(t)return console.error("Error tokenizing Apple Pay:",t),void i.completePayment(ApplePaySession.STATUS_FAILURE);i.completePayment(ApplePaySession.STATUS_SUCCESS),this.integration?(this.updatePaymentNonce(e.nonce),this.integration.resetLoading(),this.integration.submitCheckout()):"function"==typeof o.onSuccess&&o.onSuccess(e,n)}.bind(this))},updatePaymentNonce:function(t){$("applepay-payment-nonce").value=t},hideButton:function(){this.button&&this.button.hide()},_parseTransportAsJson:function(transport){return transport.responseJSON&&"object"==typeof transport.responseJSON?transport.responseJSON:transport.responseText?"object"==typeof JSON&&"function"==typeof JSON.parse?JSON.parse(transport.responseText):eval("("+transport.responseText+")"):{}}};